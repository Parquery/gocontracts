language: go

# Golang version matrix
go:
    - 1.8

before_install:
    # Install code coverage / coveralls tooling
    - go get -u github.com/axw/gocov/gocov
    - go get -u github.com/mattn/goveralls
    - go get -u golang.org/x/tools/cmd/cover

    # Merge all subpackage code coverage reports into a single report
    - go get -u github.com/modocache/gover

    # Install cyclomatic dependency analysis tool
    - go get -u github.com/fzipp/gocyclo

before_script:
    # Print build info.
    - echo $TRAVIS_COMMIT
    - echo $TRAVIS_TAG
    - echo $TRAVIS_BRANCH
    - echo $TRAVIS_BUILD_NUMBER
    - echo $TRAVIS_REPO_SLUG

    # Test if code was formatted with 'go fmt'
    - if [ -n "$(gofmt -s -l `find . -iname '*.go' | grep -v 'vendor'`)" ]; then echo "Code was not formatted with gofmt -s."; false; fi

    # Perform static code analysys
    - go tool vet -unsafeptr=false `go list ./... | grep -v vendor | sed -e "s,^,$GOPATH/src/,;s,.*:,,"`

    # Forbid the cyclomatic complexity of 15 or more
    - gocyclo -over 15 `find . -iname '*.go' | grep -v 'vendor' | grep -v '_test.go'`

script:
    # go list supply import paths for all sub directories.
    # Exclude vendor directory.
    # Execute go test on every local subpackage and generate coverage report for each.
    # Test packages in parallel (xargs -P).
    - go list ./... | grep -v vendor | xargs -n1 -I {} -P 4 go test -v -covermode=count -coverprofile=../../../{}/profile.coverprofile {}

    # Compile binary
    - go build ./...

after_success:
    # Merge all coverage reports located in subdirectories and put them under: gover.coverprofile
    - gover

    # Send code coverage report to coveralls.io
    - goveralls -service=travis-ci -coverprofile=gover.coverprofile
